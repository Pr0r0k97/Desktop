import logging
import re
import time
from time import strftime

import telebot
from telebot import types

import Cian_2
import DomClik
import DomoFond
import tg_analytic

bot = telebot.TeleBot('5582241891:AAGqYgrgB1dmjPpsQftQ7nvPQMoL2B3rOCk')


# Logger
logger = telebot.logger
telebot.logger.setLevel(logging.INFO)


@bot.message_handler(commands=['start'])
def start(message):
    start_button = types.KeyboardButton(text='üí∞ –¶–∏–∞–Ω')
    start_button_2 = types.KeyboardButton(text='üíµ DomoFond')
    start_button_3 = types.KeyboardButton(text='üî• DomClick')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(start_button, start_button_2, start_button_3)
    user_first_name = str(message.chat.first_name)
    sent = bot.send_message(message.chat.id,
                            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_first_name} üî•\n–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç BotParserNedvizhimost\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1. –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É —Å–∞–π—Ç–∞ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å\n2. –í—Å—Ç–∞–≤—Ç–µ —Å—Å—ã–ª–∫—É –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–û –í–¢–û–†–û–ô –°–¢–†–ê–ù–ò–¶–´\n3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å!\n4. –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∏–º–∞–µ—Ç 5-10 –º–∏–Ω—É—Ç!',
                            reply_markup=keyboard)
    # video = open('Bot tutorial.mp4', 'rb')
    # bot.send_video(message.chat.id, video)
    bot.register_next_step_handler(sent, callback_worker)


def callback_worker(message):
    if message.text == 'üí∞ –¶–∏–∞–Ω':
        qs = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É')
        if qs:
            bot.register_next_step_handler(qs, callback_workers)
    elif message.text == 'üíµ DomoFond':
        qe = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É DomoFond')
        if qe:
            bot.register_next_step_handler(qe, callback_workers_DomoFond)
    elif message.text == 'üî• DomClick':
        qe = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É DomClick')
        if qe:
            bot.register_next_step_handler(qe, callback_workers_DomClick)
    elif message.text[:10] == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or message.text[:10] == 'C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        st = message.text.split(' ')
        if 'txt' in st or '—Ç—Ö—Ç' in st:
            tg_analytic.analysis(st, message.chat.id)
            with open('%s.txt' % message.chat.id, 'r', encoding='UTF-8') as file:
                bot.send_document(message.chat.id, file)
                tg_analytic.remove(message.chat.id)
        else:
            messages = tg_analytic.analysis(st, message.chat.id)
            bot.send_message(message.chat.id, messages)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ üòâ')


"""_________________________Cian_______________________________"""

lists = []


def callback_workers(message):
    f = message.text
    if 'https://' in f:
        lists.append(f)
        qqq = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
        bot.register_next_step_handler(qqq, callback__two)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ üòâ')


def callback__two(message):
    page = message.text
    qwe = message.chat.id
    if re.search('\d+', page):
        lists.append(page)
        user_first_name = str(message.chat.first_name)
        Cian_2.main(ade=lists[0], pages=lists[1], user=user_first_name, id=qwe)
        timestr = strftime("%Y.%m.%d")
        doc = open(timestr + '_cians_' + user_first_name + '.csv', 'rb')
        bot.send_document(message.chat.id, doc)
        time.sleep(5)
        open(timestr + '_cians_' + user_first_name + '.csv', 'w').close()

    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ üòâ')


def info_Cian(one, id):
    print(one)
    bot.send_message(chat_id=id, text=f'Cian: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã {one}')


"""_________________________Domofond_______________________________"""

lists_DomoFond = []


def callback_workers_DomoFond(message):
    f = message.text
    if 'https://www.domofond.ru' in f:
        lists_DomoFond.append(f)
        qqq = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–æ–º–æ—Ñ–æ–Ω–¥')
        bot.register_next_step_handler(qqq, callback__two_DomoFond)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ üòâ')


def callback__two_DomoFond(message):
    page = message.text
    id = message.chat.id
    if re.search('\d+', page):
        lists_DomoFond.append(page)
        user_first_name = str(message.chat.first_name)
        DomoFond.Parsing(ade=lists_DomoFond[0], pages=lists_DomoFond[1], user=user_first_name, id=id)
        timestr = strftime("%Y.%m.%d")
        doc = open(timestr + '_Domofond_' + user_first_name + '.csv', 'rb')
        bot.send_document(message.chat.id, doc)
        time.sleep(5)
        open(timestr + '_Domofond_' + user_first_name + '.csv', 'w').close()
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ üòâ')


def info_DomoFond(one, two, id):
    bot.send_message(chat_id=id, text=f'DomoFond: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ {one} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ {two - 1}')


"""_________________________DomClick_______________________________"""

lists_DomClick = []


def callback_workers_DomClick(message):
    f = message.text
    print(f)
    if 'https://domclick.ru' in f:
        lists_DomClick.append(f)
        qqq = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–æ–º–∫–ª–∏–∫')
        bot.register_next_step_handler(qqq, callback__two_DomClick)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ üòâ')


def callback__two_DomClick(message):
    page = message.text
    id = message.chat.id
    if re.search('\d+', page):
        lists_DomClick.append(page)
        user_first_name = str(message.chat.first_name)
        DomClik.Parsing_Domclick(ade=lists_DomClick[0], pages=lists_DomClick[1], user=user_first_name, id=id)
        timestr = strftime("%Y.%m.%d")
        doc = open(timestr + '_DomClick' + '.csv', 'rb')
        bot.send_document(message.chat.id, doc)
        time.sleep(5)
        open(timestr + '_DomClick' + '.csv', 'w').close()
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ üòâ')


def info_DomClick(one, two, id):
    bot.send_message(chat_id=id, text=f'DomClick: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ {one} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ {two}')


# @bot.message_handler(content_types=['text'])
# def callback__two_Start(message):
#         bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ üòâ')
#         start

if __name__ == '__main__':
    # Polling
    while True:
        try:
            print('Online')
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(e)
            time.sleep(5)
