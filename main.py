import telebot
from telebot import types
import Cian_2
from time import strftime
import DomClik
import DomoFond
import re
import logging
import time

bot = telebot.TeleBot('5324509616:AAE4_hmcPm3U_q4z-Am_VRsniQ_VF8XnAOo')

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# Logger
logger = telebot.logger
telebot.logger.setLevel(logging.INFO)


@bot.message_handler(commands=['start'])
def start(message):
        start_button = types.KeyboardButton(text='üí∞ –¶–∏–∞–Ω')
        start_button_2 = types.KeyboardButton(text='üíµ DomoFond')
        start_button_3 = types.KeyboardButton(text='üî• DomClick')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(start_button, start_button_2, start_button_3)
        user_first_name = str(message.chat.first_name)
        sent = bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_first_name} üî•\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç Parsing_money\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–∞–π—Ç–∞ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å',  reply_markup=keyboard)
        bot.register_next_step_handler(sent, callback_worker)



def callback_worker(message):
        if message.text == 'üí∞ –¶–∏–∞–Ω':
            qs = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É')
            if qs:
                 bot.register_next_step_handler(qs, callback_workers)
        elif message.text == 'üíµ DomoFond':
            qe = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É DomoFond')
            if qe:
                bot.register_next_step_handler(qe, callback_workers_DomoFond)
        elif message.text == 'üî• DomClick':
            qe = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É DomClick')
            if qe:
                bot.register_next_step_handler(qe, callback_workers_DomClick)
        else:
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –∫–Ω–æ–ø–∫—É')



"""_________________________Cian_______________________________"""

lists = []
def callback_workers(message):
            f = message.text
            if 'https://' in f:
                lists.append(f)
                qqq = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
                bot.register_next_step_handler(qqq, callback__two)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ \start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ')

def callback__two(message):
        page = message.text
        if re.search('\d+', page):
            lists.append(page)
            user_first_name = str(message.chat.first_name)
            Cian_2.main(ade=lists[0], pages=lists[1], user=user_first_name)
            timestr = strftime("%Y.%m.%d")
            doc = open(timestr + '_cians_' + user_first_name + '.csv', 'rb')
            bot.send_document(message.chat.id, doc)
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ \start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ')


"""_________________________Domofond_______________________________"""

lists_DomoFond = []
def callback_workers_DomoFond(message):
            f = message.text
            if 'https://www.domofond.ru' in f:
                lists_DomoFond.append(f)
                qqq = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–æ–º–æ—Ñ–æ–Ω–¥')
                bot.register_next_step_handler(qqq, callback__two_DomoFond)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ \start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ')



def callback__two_DomoFond(message):
            page = message.text
            if re.search('\d+', page):
                lists_DomoFond.append(page)
                user_first_name = str(message.chat.first_name)
                DomoFond.Parsing(ade=lists_DomoFond[0], pages=lists_DomoFond[1], user=user_first_name)
                # timestr = strftime("%Y.%m.%d")
                # doc = open(timestr + '_Domofond_' + user_first_name + '.csv', 'rb')
                # bot.send_document(message.chat.id, doc)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ \start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ')


def info_DomoFond(one, two):
        bot.send_message(chat_id='5161500526', text=f'DomoFond: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ {one} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ {two}')



"""_________________________DomClick_______________________________"""

lists_DomClick = []
def callback_workers_DomClick(message):
            f = message.text
            print(f)
            if 'https://domclick.ru' in f:
                lists_DomClick.append(f)
                qqq = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–æ–º–∫–ª–∏–∫')
                bot.register_next_step_handler(qqq, callback__two_DomClick)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ \start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ')

def callback__two_DomClick(message):
        page = message.text
        print(page)
        if re.search('\d+', page):
            lists_DomClick.append(page)
            user_first_name = str(message.chat.first_name)
            DomClik.Parsing_Domclick(ade=lists_DomClick[0], pages=lists_DomClick[1], user=user_first_name)
            timestr = strftime("%Y.%m.%d")
            doc = open(timestr + '_DomClick' + '.csv', 'rb')
            bot.send_document(message.chat.id, doc)
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ \start –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–æ')


def info_DomClick(one, two):
    bot.send_message(chat_id='5161500526', text=f'DomClick: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ {one} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ {two}')


@bot.message_handler(content_types=['text'])
def callback__two_Start(message):
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ —Å—Ç–∞—Ä—Ç –∑–∞–Ω–æ–≤–æ')
        start

if __name__ == '__main__':
    # Polling
    while True:
        try:
            print('Online')
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(e)
            time.sleep(5)



